{"version":3,"sources":["components/map/heat-layer.js","util/closestCity.js","components/map/map.js","components/omnibox/omnibox.js","util/parseUrl.js","components/result-details/video.js","components/result-details/evidence.js","components/result-details/links.js","hooks/getEvidence.js","components/result-details/result-details.js","components/search-results/search-result.js","components/search-results/search-results.js","components/panel/panel.js","components/sidebar/sidebar.js","hooks/getIncidents.js","App.js","serviceWorker.js","index.js"],"names":["options","dissipating","radius","HeatLayer","coordinates","incidents","map","geocoding","google","maps","LatLng","lat","long","data","distance","coordinateA","coordinateB","Math","sqrt","getClosetCity","coordinate","results","initialDistance","city","name","i","length","cityCoordinate","currentDistance","libraries","containerStyle","flex","height","center","lng","restriction","latLngBounds","north","south","west","east","zoom","mapTypeControl","fullscreenControl","streetViewControl","Map","onCityClick","React","useState","setMap","onLoad","useCallback","mapInstance","googleMapsApiKey","mapContainerStyle","onClick","e","latLng","setZoom","panTo","Number","Omnibox","defaultInput","onClear","onSearch","input","setInput","handleSubmit","preventDefault","className","onSubmit","window","open","type","value","placeholder","onChange","target","defaultProps","parseUrl","url","link","URL","hostname","match","pathname","Video","date","description","videoUrl","linkUrl","thumbnailUrl","label","href","rel","src","alt","format","Date","controls","kind","Evidence","videos","item","video","streams","stream","key","id","site","created_at","thumbnail","Links","elements","urls","icon","useEvidence","evidence","setEvidence","useEffect","a","axios","get","fetchData","ResultDetails","hideResultDetail","title","state","links","color","width","timeout","SearchResult","onResultClick","role","tabIndex","onKeyDown","SearchResults","result","Panel","isOpen","openResult","setOpenResult","fuse","Fuse","includeScore","isCaseSensitive","threshold","keys","Sidebar","mapValue","search","setSearch","setCollection","sort","b","localeCompare","useIncidents","setIncidents","App","setMapValue","Boolean","location","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e2ce505.chunk.js","sourcesContent":["/* global google */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { HeatmapLayer } from '@react-google-maps/api';\n\nconst options = {\n  dissipating: false,\n  radius: 2,\n};\n\nfunction HeatLayer({ incidents }) {\n  const coordinates = incidents.map(\n    ({ geocoding }) => new google.maps.LatLng(geocoding.lat, geocoding.long),\n  );\n\n  return <HeatmapLayer data={coordinates} options={options} />;\n}\n\nHeatLayer.propTypes = {\n  incidents: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default HeatLayer;\n","const distance = (coordinateA, coordinateB) => {\n  const lat = (coordinateA.lat - coordinateB.lat) ** 2;\n  const long = (coordinateA.long - coordinateB.long) ** 2;\n  return Math.sqrt(lat + long);\n};\n\nconst getClosetCity = (coordinate, results) => {\n  const initialDistance = distance(coordinate, results[0].geocoding);\n  const city = {\n    name: results[0],\n    distance: initialDistance,\n    coordinate: results[0].geocoding,\n  };\n  for (let i = 0; i < results.length; i += 1) {\n    const cityCoordinate = results[i].geocoding;\n    const currentDistance = distance(coordinate, cityCoordinate);\n    if (currentDistance < city.distance) {\n      city.name = results[i].city;\n      city.distance = currentDistance;\n      city.coordinate = cityCoordinate;\n    }\n  }\n  return city;\n};\n\nexport default getClosetCity;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport HeatLayer from './heat-layer';\nimport getClosetCity from '../../util/closestCity';\n\nconst libraries = ['visualization'];\nconst googleMapsApiKey = 'AIzaSyDGPAOkljsjapYWRKo89y6McxkZ3JzwZKI';\n\nconst containerStyle = {\n  flex: '1',\n  height: '100vh',\n};\n\nconst options = {\n  center: {\n    lat: 38,\n    lng: -98,\n  },\n  restriction: {\n    latLngBounds: {\n      north: 52,\n      south: 22,\n      west: -136,\n      east: -60,\n    },\n  },\n  zoom: 5,\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nfunction Map({ incidents, onCityClick }) {\n  const [map, setMap] = React.useState(null);\n\n  const onLoad = React.useCallback(function callback(mapInstance) {\n    setMap(mapInstance);\n  }, []);\n\n  function handleMapClick(e) {\n    if (incidents.length === 0) return;\n    const city = getClosetCity(\n      {\n        lat: e.latLng.lat(),\n        long: e.latLng.lng(),\n      },\n      incidents,\n    );\n    map.setZoom(8);\n    map.panTo({\n      lat: Number(city.coordinate.lat),\n      lng: Number(city.coordinate.long),\n    });\n\n    onCityClick(city.name);\n  }\n\n  return (\n    <LoadScript libraries={libraries} googleMapsApiKey={googleMapsApiKey}>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        options={options}\n        onLoad={onLoad}\n        onClick={handleMapClick}\n      >\n        <HeatLayer incidents={incidents} />\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\nMap.propTypes = {\n  incidents: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onCityClick: PropTypes.func.isRequired,\n};\n\nexport default Map;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FaFistRaised } from 'react-icons/fa';\nimport { MdSearch, MdClear } from 'react-icons/md';\n\nimport './omnibox.css';\n\nfunction Omnibox({ defaultInput, onClear, onSearch }) {\n  const [input, setInput] = React.useState(defaultInput);\n\n  const handleChange = (e) => setInput(e.target.value);\n\n  const handleSubmit = (e) => {\n    onSearch(input);\n    e.preventDefault();\n  };\n\n  const handleClear = () => {\n    onClear();\n    setInput('');\n  };\n\n  const handleLogoClick = () => {\n    window.open(\n      'https://github.com/police-brutality-2020/visualizer',\n      'police-brutality-2020',\n    );\n  };\n\n  return (\n    <div className=\"omnibox\">\n      <form onSubmit={handleSubmit}>\n        <FaFistRaised className=\"icon logo\" onClick={handleLogoClick} />\n        <input\n          type=\"text\"\n          value={input}\n          placeholder=\"Search Police Brutality\"\n          onChange={handleChange}\n        />\n        <MdSearch className=\"icon\" onClick={handleSubmit} />\n        <div className=\"divider\" />\n        <MdClear className=\"icon\" onClick={handleClear} />\n      </form>\n    </div>\n  );\n}\n\nOmnibox.propTypes = {\n  defaultInput: PropTypes.string,\n  onClear: PropTypes.func,\n  onSearch: PropTypes.func,\n};\n\nOmnibox.defaultProps = {\n  defaultInput: '',\n  onClear: () => {},\n  onSearch: () => {},\n};\n\nexport default Omnibox;\n","import React from 'react';\nimport { FaTwitter, FaReddit, FaFacebookF, FaLink } from 'react-icons/fa';\n\nconst parseUrl = (url) => {\n  const link = new URL(url);\n  const domain = link.hostname.match(/[^.]+\\.\\w+$/);\n\n  switch (domain[0]) {\n    case 'twitter.com':\n      // '@username'\n      return [<FaTwitter />, `@${link.pathname.match(/([^/]+)/)[1]}`];\n    case 'reddit.com':\n      // 'r/subreddit'\n      return [<FaReddit />, link.pathname.match(/r\\/[^/]+/)[0]];\n    case 'facebook.com':\n      return [<FaFacebookF />, link.hostname];\n    default:\n      return [<FaLink />, link.hostname];\n  }\n};\n\nexport default parseUrl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport parseUrl from '../../util/parseUrl';\n\nimport './video.css';\n\nfunction Video({ type, date, description, videoUrl, linkUrl, thumbnailUrl }) {\n  const [, label] = parseUrl(linkUrl);\n\n  return (\n    <div className=\"video\">\n      <a href={linkUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src={thumbnailUrl} alt=\"thumbnail\" />\n        <div className=\"source\">\n          <div className=\"label\">{label}</div>\n          <div className=\"type\">\n            {type} &bull; {format(new Date(date), 'LLLL do, yyyy')}\n          </div>\n        </div>\n      </a>\n      <p>{description}</p>\n      <video controls>\n        <source type=\"video/mp4\" src={videoUrl} />\n        <track kind=\"captions\" />\n      </video>\n    </div>\n  );\n}\n\nVideo.propTypes = {\n  type: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  videoUrl: PropTypes.string.isRequired,\n  linkUrl: PropTypes.string.isRequired,\n  thumbnailUrl: PropTypes.string.isRequired,\n};\n\nexport default Video;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Video from './video';\n\nimport './evidence.css';\n\nfunction Evidence({ data }) {\n  const videos = data.map((item) => {\n    // Ensure the item has video\n    if (!item.video[0] || !item.video[0].streams) return null;\n    const video = item.video[0];\n    const stream = video.streams[0];\n\n    return (\n      <Video\n        key={item.id}\n        type={video.site}\n        date={video.created_at}\n        description={video.description}\n        linkUrl={video.url}\n        videoUrl={stream.url}\n        thumbnailUrl={video.thumbnail}\n      />\n    );\n  });\n\n  return (\n    <div className=\"evidence\">\n      <h4>Evidence</h4>\n      {videos}\n    </div>\n  );\n}\n\nEvidence.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Evidence;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport parseUrl from '../../util/parseUrl';\n\nimport './links.css';\n\nfunction Links({ urls }) {\n  const elements = urls.map((url) => {\n    // Look up the icon and label for this URL\n    const [icon, label] = parseUrl(url);\n\n    return (\n      <a key={url} href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {icon}\n        <span>{label}</span>\n      </a>\n    );\n  });\n\n  return <div className=\"links\">{elements}</div>;\n}\n\nLinks.propTypes = {\n  urls: PropTypes.arrayOf(PropTypes.string),\n};\n\nLinks.defaultProps = {\n  urls: [],\n};\n\nexport default Links;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useEvidence = (id) => {\n  const [evidence, setEvidence] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await axios.get(\n        `https://api.846policebrutality.com/api/incidents/${id}?include=evidence`,\n      );\n      setEvidence(data.data[0]);\n    };\n\n    fetchData();\n  }, [id]);\n\n  return evidence;\n};\n\nexport default useEvidence;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport Loader from 'react-loader-spinner';\nimport { FaChevronLeft } from 'react-icons/fa';\nimport Evidence from './evidence';\nimport Links from './links';\nimport useEvidence from '../../hooks/getEvidence';\n\nimport './result-details.css';\n\nfunction ResultDetails({ id, hideResultDetail }) {\n  const data = useEvidence(id);\n\n  return data ? (\n    <div className=\"result-details\">\n      <div className=\"header\">\n        <FaChevronLeft onClick={hideResultDetail} />\n        <div>\n          <h3>{data.title}</h3>\n          <p>\n            {data.city}, {data.state} &bull;{' '}\n            {format(new Date(data.date), 'LLL dd, yyyy')}\n          </p>\n        </div>\n      </div>\n      <div className=\"divider\" />\n      <Links urls={data.links} />\n      <div className=\"divider\" />\n      <Evidence data={data.evidence} />\n    </div>\n  ) : (\n    <div className=\"results-details-loader\">\n      <Loader\n        type=\"TailSpin\"\n        color=\"#000000\"\n        height={50}\n        width={50}\n        timeout={3000}\n      />\n    </div>\n  );\n}\n\nResultDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n  hideResultDetail: PropTypes.func.isRequired,\n};\n\nexport default ResultDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\n\nimport './search-result.css';\n\nfunction SearchResult({ id, title, city, state, date, onResultClick }) {\n  const onClick = () => onResultClick(id);\n\n  return (\n    <div\n      className=\"search-result\"\n      role=\"button\"\n      tabIndex={0}\n      onClick={onClick}\n      onKeyDown={onClick}\n    >\n      <h4>{title}</h4>\n      <p>\n        {city}, {state} &bull; {format(new Date(date), 'LLLL do, yyyy')}\n      </p>\n    </div>\n  );\n}\n\nSearchResult.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  state: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  onResultClick: PropTypes.func.isRequired,\n};\n\nexport default SearchResult;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchResult from './search-result';\n\nimport './search-results.css';\n\nfunction SearchResults({ results, onResultClick }) {\n  const elements = results.map((result) => (\n    <SearchResult\n      id={result.id}\n      key={result.id}\n      title={result.title}\n      city={result.city}\n      state={result.state}\n      date={result.date}\n      onResultClick={onResultClick}\n    />\n  ));\n\n  return <div className=\"search-results\">{elements}</div>;\n}\n\nSearchResults.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onResultClick: PropTypes.func.isRequired,\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ResultDetails from '../result-details/result-details';\nimport SearchResults from '../search-results/search-results';\n\nimport './panel.css';\n\nfunction Panel({ results, isOpen }) {\n  const [openResult, setOpenResult] = React.useState(null);\n  const hideResultDetail = () => setOpenResult(false);\n\n  return (\n    <div className={`panel ${isOpen ? 'open' : ''}`}>\n      <div className=\"omnibox-spacer\" />\n      {openResult ? (\n        <ResultDetails hideResultDetail={hideResultDetail} id={openResult} />\n      ) : (\n        <SearchResults results={results} onResultClick={setOpenResult} />\n      )}\n    </div>\n  );\n}\n\nPanel.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default Panel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Fuse from 'fuse.js';\nimport Omnibox from '../omnibox/omnibox';\nimport Panel from '../panel/panel';\n\nconst fuse = new Fuse([], {\n  includeScore: true,\n  isCaseSensitive: false,\n  threshold: 0.3,\n  keys: ['city', 'state', 'title'],\n});\n\nfunction Sidebar({ incidents, mapValue }) {\n  const [search, setSearch] = React.useState('');\n\n  React.useEffect(() => {\n    setSearch(mapValue);\n  }, [mapValue]);\n\n  const handleClear = () => setSearch('');\n  const isOpen = !!search;\n\n  // Inform the Fuse instance of the new `incidents` array\n  fuse.setCollection(incidents);\n\n  // Perform a fuzzy search and sort the results by date\n  const results = fuse\n    .search(search)\n    .map((result) => result.item)\n    .sort((a, b) => b.date.localeCompare(a.date));\n\n  return (\n    <>\n      <Omnibox\n        key={`omnibox-${search}`}\n        defaultInput={search}\n        onClear={handleClear}\n        onSearch={setSearch}\n      />\n      <Panel key={`panel-${search}`} results={results} isOpen={isOpen} />\n    </>\n  );\n}\n\nSidebar.propTypes = {\n  incidents: PropTypes.arrayOf(PropTypes.object).isRequired,\n  mapValue: PropTypes.string.isRequired,\n};\n\nexport default Sidebar;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useIncidents = () => {\n  const [incidents, setIncidents] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await axios.get(\n        'https://api.846policebrutality.com/api/incidents',\n      );\n      setIncidents(data.data);\n    };\n\n    fetchData();\n  }, []);\n\n  return incidents;\n};\n\nexport default useIncidents;\n","import React from 'react';\nimport Map from './components/map/map';\nimport Sidebar from './components/sidebar/sidebar';\nimport useIncidents from './hooks/getIncidents';\n\nimport './App.css';\n\nfunction App() {\n  const [mapValue, setMapValue] = React.useState('');\n\n  const incidents = useIncidents();\n  if (!incidents) return null;\n\n  return (\n    <div className=\"app\">\n      <Sidebar incidents={incidents} mapValue={mapValue} />\n      <Map incidents={incidents} onCityClick={setMapValue} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}